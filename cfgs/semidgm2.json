{
    "config name" : "semidgm",

    "dataset" : "mnist",
    "dataset params" : {
        "semi-supervised" : true,               //
        "input_shape" : [28, 28, 1],            //
        "nb_labelled_images_per_class" : 100    //
    },


    // the validator output, tensorboard output and tensorflow checkpoint will be
    // saved under this directory
    "assets dir" : "assets/semidgm2/semidgm8",


    // "semi-supervised learning with deep generative models"
    // implemention is in models/semi_dgm2.py
    "ganmodel" : "semidgm2",
    "ganmodel params" : {
        "name" : "semidgm",

        // shape params config
        "input_shape" : [28, 28, 1],
        "nb_classes" : 10,
        "hz_dim" : 2,
        "hx_dim" : 50,

        // optimizers config
        // other optimizers are in utils/optimizer.py
        "optimizer" : "rmsprop",

        // learning rate scheme
        // other learning rate schemes are in utils/learning_rate.py
        "lr" : 0.001,
        "lr_scheme" : "exponential",
        "lr_params" : {
            "decay_steps" : 1000,
            "decay_rate" : 0.9
        },

        "m1_train_steps" : 10000,

        "summary" : true,
        "debug" : true,

        // the weight of different losses
        // default loss weight is 1.0
        "loss kl z weight" : 0.000,
        "loss kl y weight" : 0.000,
        "loss m2 reconstruction weight" : 0.0,
 
        // network define
        "x encoder" : "EncoderSimple",
        "x encoder params" : {
            "nb_conv_blocks" : 0,
            "batch_norm" : "none",
            "nb_fc_nodes" : [600, 600],
            "output_distribution": "gaussian",
            "output_dims" : 50
        },

        "hx decoder" : "DecoderSimple",
        "hx decoder params" : {
            "nb_conv_blocks" : 0,
            "batch_norm" : "none",
            "nb_fc_nodes" : [600, 600, 784],
            "output_distribution": "gaussian",
            "output_dims" : 0,
            "including_deconv" : false,
            "fc_output_reshape" : [28, 28, 1]
        },

        "hx y encoder" : "EncoderSimple",
        "hx y encoder params" : {
            "nb_conv_blocks" : 0,
            "batch_norm" : "none",
            "nb_fc_nodes" : [40, 20],
            "output_distribution": "gaussian",
            "output_dims" : 2
        },

        "hz y decoder" : "DecoderSimple",
        "hz y decoder params" : {
            "nb_deconv_blocks" : 0,
            "batch_norm" : "none",
            "nb_fc_nodes" : [20, 40],
            "output_distribution": "gaussian",
            "output_dims" : 50,
            "including_deconv" : false,
            "output_activation" : "sigmoid"
        },

        "hx classifier" : "ClassifierSimple",
        "hx classifier params" : {
            "nb_conv_blocks" : 0,
            "batch_norm" : "none",
            "nb_fc_nodes" : [30],
            "output_dims" : 10
        }
    },


    "trainer" : "semi-supervised",
    "trainer params" : {
        "continue train" : false,
        "train steps" : 20000,
        "summary steps" : 100,
        "log steps" : 100,
        "supervised step" : 1,
        "unsupervised step" : 9,
        "batch_size" : 128,
        "print info" : true,
        "validators" : [
            {
                "validator" : "dataset_validator",
                "validate steps" : 100,
                "has summary" : true,
                "validator params" : {
                    "metric" : "accuracy",
                    "metric type" : "top1"
                }
            },
            {
                "validator" : "scatter_plot_validator",
                "validate steps" : 1000,
                "validator params" : {
                    "watch variable" : "hidden dist",
                    "x_dim" : 0,
                    "y_dim" : 1,
                    "log dir" : "scatter1"
                }
            }
        ]
    }
}


